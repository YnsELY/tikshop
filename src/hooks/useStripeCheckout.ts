import { useState } from 'react';
import { supabase } from '../lib/supabase';
import { useAuthStore } from '../store/authStore';
import { getShippingRateId } from '../stripe-config';
import { sessionWatchdog } from '../lib/sessionWatchdog';
import toast from 'react-hot-toast';

interface CheckoutSessionParams {
  priceId: string;
  mode: 'payment' | 'subscription';
  successUrl: string;
  cancelUrl: string;
  quantity?: number;
  shippingRateId?: string;
  metadata?: Record<string, string>;
}

interface MultiProductCheckoutParams {
  lineItems: Array<{ price: string; quantity: number }>;
  mode: 'payment' | 'subscription';
  successUrl: string;
  cancelUrl: string;
  metadata?: Record<string, string>;
}

export const useStripeCheckout = () => {
  const [isLoading, setIsLoading] = useState(false);
  const { user } = useAuthStore();

  // Fonction centralis√©e pour obtenir un token d'acc√®s valide
  const getValidAccessToken = async (): Promise<string> => {
    console.log('üîê Getting valid access token...');
    
    // R√©cup√©rer la session actuelle et la rafra√Æchir si n√©cessaire
    const { data: { session }, error: sessionError } = await supabase.auth.getSession();
    
    if (sessionError) {
      console.error('‚ùå Session error:', sessionError);
      throw new Error('Erreur de session. Veuillez vous reconnecter.');
    }
    
    if (!session?.access_token) {
      console.error('‚ùå No access token in session');
      // Essayer de rafra√Æchir la session
      console.log('üîÑ Attempting to refresh session...');
      const { data: refreshData, error: refreshError } = await supabase.auth.refreshSession();
      
      if (refreshError || !refreshData.session?.access_token) {
        console.error('‚ùå Session refresh failed:', refreshError);
        throw new Error('Session expir√©e. Veuillez vous reconnecter.');
      }
      
      console.log('‚úÖ Session refreshed successfully');
      return refreshData.session.access_token;
    }
    
    // V√©rifier si le token est expir√©
    try {
      const tokenPayload = JSON.parse(atob(session.access_token.split('.')[1]));
      const now = Math.floor(Date.now() / 1000);
      
      // Rafra√Æchir si le token expire dans les 5 prochaines minutes
      if (tokenPayload.exp && (tokenPayload.exp - now) < 300) {
        console.log('üîÑ Token expired, refreshing...');
        
        const { data: refreshData, error: refreshError } = await supabase.auth.refreshSession();
        
        if (refreshError || !refreshData.session?.access_token) {
          console.error('‚ùå Session refresh failed:', refreshError);
          throw new Error('Impossible de rafra√Æchir la session. Veuillez vous reconnecter.');
        }
        
        console.log('‚úÖ Session refreshed successfully');
        return refreshData.session.access_token;
      }
    } catch (tokenError) {
      console.warn('‚ö†Ô∏è Could not parse token, proceeding with current session');
    }
    
    console.log('‚úÖ Valid access token obtained');
    return session.access_token;
  };

  const createCheckoutSession = async (params: CheckoutSessionParams) => {
    console.log('üì° createCheckoutSession: Starting checkout process...');
    
    if (!user) {
      console.error('‚ùå createCheckoutSession: User not authenticated');
      throw new Error('User must be authenticated');
    }

    // Validation des param√®tres d'entr√©e
    if (!params.priceId) {
      console.error('‚ùå createCheckoutSession: priceId is required');
      throw new Error('Price ID is required');
    }
    
    if (!params.successUrl || !params.cancelUrl) {
      console.error('‚ùå createCheckoutSession: URLs are required');
      throw new Error('Success and cancel URLs are required');
    }

    setIsLoading(true);
    console.log('üîÑ createCheckoutSession: Loading state set to true');

    try {
      console.log('üöÄ Starting createCheckoutSession...');
      console.log('üìã Params:', {
        priceId: params.priceId,
        mode: params.mode,
        quantity: params.quantity,
        hasMetadata: !!params.metadata
      });

      // Obtenir un token d'acc√®s valide
      const accessToken = await getValidAccessToken();
      
      console.log('üì° Making request to Stripe function...');

      // D√©terminer le shipping rate √† utiliser
      const shippingRateId = params.shippingRateId || await getShippingRateId(user.id);
      console.log('üöö Using shipping rate:', shippingRateId === 'shr_1RwnghLvKNaGPjzpHOhrxqlA' ? '6‚Ç¨' : '0‚Ç¨');

      const apiUrl = `${import.meta.env.VITE_SUPABASE_URL}/functions/v1/stripe-checkout`;
      console.log('üì° API URL:', apiUrl);
      console.log('üì§ Request payload:', {
        price_id: params.priceId,
        mode: params.mode,
        success_url: params.successUrl,
        cancel_url: params.cancelUrl,
        quantity: params.quantity || 1,
        shipping_rate_id: shippingRateId,
        metadata: params.metadata || {},
      });

      const response = await fetch(apiUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${accessToken}`,
        },
        body: JSON.stringify({
          price_id: params.priceId,
          mode: params.mode,
          success_url: params.successUrl,
          cancel_url: params.cancelUrl,
          quantity: params.quantity || 1,
          shipping_rate_id: shippingRateId,
          metadata: params.metadata || {},
        }),
      });

      console.log('üì• Response status:', response.status);
      console.log('üì• Response headers:', Object.fromEntries(response.headers.entries()));

      if (!response.ok) {
        const errorText = await response.text();
        console.error('‚ùå Stripe function error response:', errorText);
        
        let errorData;
        try {
          errorData = JSON.parse(errorText);
        } catch {
          errorData = { error: errorText };
        }
        
        // Messages d'erreur plus sp√©cifiques
        if (response.status === 401) {
          throw new Error('Session expir√©e. Veuillez vous reconnecter.');
        } else if (response.status === 403) {
          throw new Error('Acc√®s refus√©. V√©rifiez vos permissions.');
        } else if (response.status === 500) {
          throw new Error('Erreur serveur Stripe. Veuillez r√©essayer dans quelques instants.');
        } else if (response.status === 404) {
          throw new Error('Service de paiement non disponible. Contactez le support.');
        } else {
          throw new Error(errorData.error || `Erreur ${response.status}: Impossible de cr√©er la session de paiement`);
        }
      }

      const responseData = await response.json();
      console.log('üì• Response data:', responseData);
      const { url } = responseData;
      
      if (url) {
        console.log('üéØ Redirecting to Stripe...');
        console.log('üîó Stripe URL:', url);
        toast.success('Redirection vers Stripe...');
        
        // V√©rifier que l'URL est valide avant la redirection
        try {
          new URL(url);
          setIsLoading(false);
          
          // Utiliser une redirection plus robuste
          setTimeout(() => {
            window.location.href = url;
          }, 100);
          
          // Ouvrir dans un nouvel onglet au lieu de rediriger
          setTimeout(() => {
            window.open(url, '_blank');
          }, 100);
        } catch (urlError) {
          console.error('‚ùå Invalid URL received from Stripe:', url);
          throw new Error('URL de paiement invalide re√ßue');
        }
      } else {
        console.error('‚ùå No URL in response:', responseData);
        throw new Error('Aucune URL de paiement re√ßue du serveur');
      }
    } catch (error) {
      console.error('‚ùå Checkout error:', error);
      setIsLoading(false);
      throw error;
    }
  };

  const createMultiProductCheckoutSession = async (params: MultiProductCheckoutParams) => {
    console.log('üì° createMultiProductCheckoutSession: Starting multi-product checkout...');
    
    if (!user) {
      console.error('‚ùå createMultiProductCheckoutSession: User not authenticated');
      throw new Error('User must be authenticated');
    }

    if (!params.lineItems || params.lineItems.length === 0) {
      console.error('‚ùå createMultiProductCheckoutSession: Line items are required');
      throw new Error('Line items are required');
    }

    setIsLoading(true);
    console.log('üîÑ createMultiProductCheckoutSession: Loading state set to true');

    try {
      // Obtenir un token d'acc√®s valide
      const accessToken = await getValidAccessToken();
      
      console.log('üì° Making request to multi-product Stripe function...');
      console.log('üì¶ Line items:', params.lineItems.length);

      const apiUrl = `${import.meta.env.VITE_SUPABASE_URL}/functions/v1/stripe-checkout-multi`;
      
      const requestBody = {
        line_items: params.lineItems,
        mode: params.mode,
        success_url: params.successUrl,
        cancel_url: params.cancelUrl,
        metadata: params.metadata || {}
      };
      
      console.log('üì§ Request body:', requestBody);
      console.log('üì° API URL:', apiUrl);
      
      const response = await fetch(apiUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${accessToken}`,
        },
        body: JSON.stringify(requestBody),
      });

      console.log('üì• Response status:', response.status);
      console.log('üì• Response headers:', Object.fromEntries(response.headers.entries()));
      
      if (!response.ok) {
        const errorText = await response.text();
        console.error('‚ùå Multi-product Stripe function error response:', errorText);
        
        let errorData;
        try {
          errorData = JSON.parse(errorText);
        } catch {
          errorData = { error: errorText };
        }
        
        // Messages d'erreur plus sp√©cifiques
        if (response.status === 401) {
          throw new Error('Session expir√©e. Veuillez vous reconnecter.');
        } else if (response.status === 403) {
          throw new Error('Acc√®s refus√©. V√©rifiez vos permissions.');
        } else if (response.status === 500) {
          throw new Error('Erreur serveur Stripe. Veuillez r√©essayer dans quelques instants.');
        } else if (response.status === 404) {
          throw new Error('Service de paiement non disponible. Contactez le support.');
        } else {
          throw new Error(errorData.error || `Erreur ${response.status}: Impossible de cr√©er la session de paiement`);
        }
      }

      const responseData = await response.json();
      console.log('üì• Multi-product response data:', responseData);
      
      if (responseData.url) {
        console.log('üéØ Redirecting to Stripe checkout...');
        console.log('üîó Stripe checkout URL:', responseData.url);
        toast.success('Redirection vers le paiement...');
        
        // V√©rifier que l'URL est valide avant la redirection
        try {
          new URL(responseData.url);
          setIsLoading(false);
          
          // Utiliser une redirection plus robuste avec d√©lai
          setTimeout(() => {
            window.location.href = responseData.url;
          }, 100);
          
          // Ouvrir dans un nouvel onglet au lieu de rediriger
          setTimeout(() => {
            window.open(responseData.url, '_blank');
          }, 100);
        } catch (urlError) {
          console.error('‚ùå Invalid checkout URL received:', responseData.url);
          throw new Error('URL de checkout invalide re√ßue');
        }
      } else {
        console.error('‚ùå No URL in multi-product response:', responseData);
        throw new Error('Aucune URL de checkout re√ßue du serveur');
      }
    } catch (error) {
      console.error('‚ùå Multi-product checkout error:', error);
      setIsLoading(false);
      throw error;
    }
  };

  return {
    createCheckoutSession,
    createMultiProductCheckoutSession,
    isLoading,
  };
};